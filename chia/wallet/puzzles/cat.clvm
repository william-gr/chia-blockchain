; Coins locked with this puzzle are spendable cats.
;
; Choose a list of n inputs (n>=1), I_1, ... I_n with amounts A_1, ... A_n.
;
; We put them in a ring, so "previous" and "next" have intuitive k-1 and k+1 semantics,
; wrapping so {n} and 0 are the same, ie. all indices are mod n.
;
; Each coin creates 0 or more coins with total output value O_k.
; Let D_k = the "debt" O_k - A_k contribution of coin I_k, ie. how much debt this input accumulates.
; Some coins may spend more than they contribute and some may spend less, ie. D_k need
; not be zero. That's okay. It's enough for the total of all D_k in the ring to be 0.
;
; A coin can calculate its own D_k since it can verify A_k (it's hashed into the coin id)
; and it can sum up `CREATE_COIN` conditions for O_k.
;
; Defines a "subtotal of debts" S_k for each coin as follows:
;
; S_1 = 0
; S_k = S_{k-1} + D_{k-1}
;
; Here's the main trick that shows the ring sums to 0.
; You can prove by induction that S_{k+1} = D_1 + D_2 + ... + D_k.
; But it's a ring, so S_{n+1} is also S_1, which is 0. So D_1 + D_2 + ... + D_k = 0.
; So the total debts must be 0, ie. no coins are created or destroyed.
;
; Each coin's solution includes I_{k-1}, I_k, and I_{k+1} along with proofs that each is a CAT.
; Each coin's solution includes S_{k-1}. It calculates D_k = O_k - A_k, and then S_k = S_{k-1} + D_{k-1}
;
; Announcements are used to ensure that each S_k follows the pattern is valid.
; Announcements automatically commit to their own coin id.
; Coin I_k creates an announcement that further commits to I_{k-1} and S_{k-1}.
;
; Coin I_k gets a proof that I_{k+1} is a cat, so it knows it must also create an announcement
; when spent. It checks that I_{k+1} creates an announcement committing to I_k and S_k.
;
; So S_{k+1} is correct iff S_k is correct.
;
; Coins also receive proofs that their neighbors are cats, ensuring the announcements aren't forgeries, as
; inner puzzles are not allowed to use `CREATE_COIN_ANNOUNCEMENT`.
;
; In summary, I_k generates an announcement Y_k (for "yell") as follows:
;
;  Y_k: hash of I_k (automatically), I_{k-1}, S_k
;
; Each coin ensures that the next coin's announcement is as expected:
;  Y_{k+1} : hash of I_{k+1}, I_k, S_{k+1}
;
; TLDR:
;  I_k : coins
;  A_k : amount coin k contributes
;  O_k : amount coin k spend
;  D_k : difference/delta that coin k incurs (A - O)
;  S_k : subtotal of debts D_1 + D_2 ... + D_k
;  Y_k : announcements created by coin k commiting to I_{k-1}, I_k, S_k
;
; All conditions go through a "transformer" that looks for CREATE_COIN conditions
; generated by the inner solution, and wraps the puzzle hash ensuring the output is a cat.
;
; Three output conditions are prepended to the list of conditions for each I_k:
;  (ASSERT_MY_ID I_k) to ensure that the passed in value for I_k is correct
;  (CREATE_COIN_ANNOUNCEMENT I_{k-1} S_k) to create this coin's announcement
;  (ASSERT_COIN_ANNOUNCEMENT hashed_announcement(Y_{k+1})) to ensure the next coin really is next and
;     the relative values of S_k and S_{k+1} are correct
;
; This is all we need to do to ensure cats exactly balance in the inputs and outputs.
;
; Proof:
;   Consider n, k, I_k values, O_k values, S_k and A_k as above.
;   For the (CREATE_COIN_ANNOUNCEMENT Y_{k+1}) (created by the next coin)
;   and (ASSERT_COIN_ANNOUNCEMENT hashed(Y_{k+1})) to match,
;   we see that I_k can ensure that is has the correct value for S_{k+1}.
;
;   By induction, we see that S_{m+1} = sum(i, 1, m) [O_i - A_i] = sum(i, 1, m) O_i - sum(i, 1, m) A_i
;   So S_{n+1} = sum(i, 1, n) O_i - sum(i, 1, n) A_i. But S_{n+1} is actually S_1 = 0,
;   so thus sum(i, 1, n) O_i = sum (i, 1, n) A_i, ie. output total equals input total.

;; GLOSSARY:
;;  MOD_HASH: this code's sha256 tree hash
;;  GENESIS_COIN_CHECKER: the function that determines if a coin can mint new cats
;;  INNER_PUZZLE: an independent puzzle protecting the coins. Solutions to this puzzle are expected to
;;              generate `AGG_SIG` conditions and possibly `CREATE_COIN` conditions.
;; ---- items above are curried into the puzzle hash ----
;;  inner_puzzle_solution: the solution to the inner puzzle
;;  prev_coin_id: the id for the previous coin
;;  this_coin_bundle: ((parent_id puzzle_hash amount) . lineage_proof)
;;  next_coin_bundle: (parent_id inner_puzzle_hash amount)
;;  prev_subtotal: the subtotal between prev-coin and this-coin
;;
;; coin_info: `(parent_id puzzle_hash amount)`. This defines the coin id used with ASSERT_MY_COIN_ID
;; coin-bundle: the cons box `(coin_info . lineage_proof)`
;;
;; and automatically hashed in to the announcement generated with CREATE_COIN_ANNOUNCEMENT.
;;

(mod (MOD_HASH                 ;; curried into puzzle
      LIMITATIONS_PROGRAM_HASH ;; curried into puzzle
      INNER_PUZZLE             ;; curried into puzzle
      inner_puzzle_solution    ;; if invalid, INNER_PUZZLE will fail
      limitations_program      ;; The reveal of the hash curried above.  Can be () for default lineage checking.
      prev_coin_id             ;; used in this coin's announcement, prev_coin ASSERT_COIN_ANNOUNCEMENT will fail if wrong
      this_coin_bundle         ;; verified with ASSERT_MY_COIN_ID
      next_coin_bundle         ;; used to generate ASSERT_COIN_ANNOUNCEMENT
      prev_subtotal            ;; included in announcement, prev_coin ASSERT_COIN_ANNOUNCEMENT will fail if wrong
      extra_delta              ;; this is the "legal discrepancy" between your real delta and what you're announcing your delta is
    )

     ;;;;; start library code

     (include condition_codes.clvm)
     (include curry-and-treehash.clinc)
     (include cat_truths.clib)

     (defmacro assert items
         (if (r items)
             (list if (f items) (c assert (r items)) (q . (x)))
             (f items)
         )
     )

     (defun-inline not (arg)
      (i arg 0 1)
     )

     ; takes a lisp tree and returns the hash of it
     (defun sha256tree1 (TREE)
           (if (l TREE)
               (sha256 2 (sha256tree1 (f TREE)) (sha256tree1 (r TREE)))
               (sha256 1 TREE)))

    ; cat_mod_struct = (MOD_HASH MOD_HASH_hash GENESIS_COIN_CHECKER GENESIS_COIN_CHECKER_hash)

    (defun-inline mod_hash_from_cat_mod_struct (cat_mod_struct) (f cat_mod_struct))
    (defun-inline mod_hash_hash_from_cat_mod_struct (cat_mod_struct) (f (r cat_mod_struct)))
    (defun-inline genesis_coin_checker_hash_from_cat_mod_struct (cat_mod_struct) (f (r (r (r cat_mod_struct)))))

     ;;;;; end library code

     ;; return the puzzle hash for a cat with the given `GENESIS_COIN_CHECKER_hash` & `INNER_PUZZLE`
     (defun-inline cat_puzzle_hash (cat_mod_struct inner_puzzle_hash)
       (puzzle-hash-of-curried-function (mod_hash_from_cat_mod_struct cat_mod_struct)
                                        inner_puzzle_hash
                                        (sha256 ONE (genesis_coin_checker_hash_from_cat_mod_struct cat_mod_struct))
                                        (mod_hash_hash_from_cat_mod_struct cat_mod_struct)
       )
     )

     ;; tweak `CREATE_COIN` condition by wrapping the puzzle hash, forcing it to be a cat
     ;; prohibit CREATE_COIN_ANNOUNCEMENT

     (defun-inline morph_condition (condition cat_mod_struct)
       (if (= (f condition) CREATE_COIN)
         (c CREATE_COIN
               (c (cat_puzzle_hash cat_mod_struct (f (r condition)))
                    (r (r condition)))
         )
         (if (= (f condition) CREATE_COIN_ANNOUNCEMENT)
           (list CREATE_COIN_ANNOUNCEMENT (concat 0xca (f (r condition))))
           condition
         )
       )
     )

     ;; tweak all `CREATE_COIN` conditions, enforcing created coins to be cats
     (defun morph_conditions (conditions cat_mod_struct)
       (if conditions
         (c
           (morph_condition (f conditions) cat_mod_struct)
           (morph_conditions (r conditions) cat_mod_struct)
         )
         ()
       )
     )

     ;; given a coin triplet, return the id of the coin
     (defun-inline coin_id_for_coin (coin cat_mod_struct)
       (sha256 (f coin) (cat_puzzle_hash cat_mod_struct (f (r coin))) (f (r (r coin))))
     )

     ;; utility to fetch coin amount from coin
     (defun-inline input_amount_for_coin (coin)
       (f (r (r coin)))
     )

     ;; calculate the hash of an announcement
     (defun-inline calculate_annoucement_id (this_coin_id this_subtotal next_coin_id cat_mod_struct)
       ; NOTE: the next line containts a bug, as sha256tree1 ignores `this_subtotal`
       (sha256 next_coin_id 0xcb this_coin_id this_subtotal)
     )

     ;; create the `ASSERT_COIN_ANNOUNCEMENT` condition that ensures the next coin's announcement is correct
     (defun-inline create_assert_next_announcement_condition (this_coin_id this_subtotal next_coin_id cat_mod_struct)
       (list ASSERT_COIN_ANNOUNCEMENT
             (calculate_annoucement_id this_coin_id
                                            this_subtotal
                                            next_coin_id
                                            cat_mod_struct
             )
       )
     )

     ;; here we commit to I_{k-1} and S_k
     (defun-inline create_announcement_condition (prev_coin_id prev_subtotal)
       (list CREATE_COIN_ANNOUNCEMENT
             (concat 0xcb (concat prev_coin_id prev_subtotal))
       )
      )

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;

     ;; this function takes a condition and returns an integer indicating
     ;; the value of all output coins created with CREATE_COIN. If it's not
     ;; a CREATE_COIN condition, it returns 0.

     (defun-inline output_value_for_condition (condition)
       (if (= (f condition) CREATE_COIN)
         (f (r (r condition)))
         0
       )
     )

     ;; this function takes a list of conditions and returns an integer indicating
     ;; the value of all output coins created with CREATE_COIN
     (defun output_totals (conditions)
       (if conditions
         (+ (output_value_for_condition (f conditions)) (output_totals (r conditions)))
         0
       )
     )

     ;; add three conditions to the list of morphed conditions:
     ;; ASSERT_MY_COIN_ID for `this_coin_info`
     ;; CREATE_COIN_ANNOUNCEMENT for my announcement
     ;; ASSERT_COIN_ANNOUNCEMENT for the next coin's announcement
     (defun-inline generate_final_output_conditions
       (
         prev_subtotal
         this_subtotal
         morphed_conditions
         prev_coin_id
         this_coin_id
         next_coin_id
         cat_mod_struct
       )
         (c (create_announcement_condition prev_coin_id prev_subtotal)
           (c (create_assert_next_announcement_condition this_coin_id this_subtotal next_coin_id cat_mod_struct)
             morphed_conditions)
         )
      )

    (defun-inline coin_info_for_coin_bundle (coin_bundle)
      (f coin_bundle)
    )

     ;;;;;;;;;;;;;;;;;;;;;;;;;;; lineage checking

     ;; return true iff parent of `this_coin_info` is provably a cat
     (defun is_parent_cat (
       cat_mod_struct
       parent_id
       (parent_parent_coin_id parent_inner_puzzle_hash parent_amount)
     )

       (if (= parent_id
              (sha256 parent_parent_coin_id
                      (cat_puzzle_hash cat_mod_struct parent_inner_puzzle_hash)
                      parent_amount
              )
           )
           1
           (x)
       )
     )

     ;; return true iff the lineage proof is valid
     ;; lineage_proof is of one of two forms:
     ;;  (1 . (parent_parent_coin_id parent_inner_puzzle_hash parent_amount))
     ;;  (0 . some_opaque_proof_passed_to_GENESIS_COIN_CHECKER)
     ;; so the `f` value determines what kind of proof it is, and the `r` value is the proof

     (defun-inline limitations_program_from_cat_struct (cat_mod_struct)
       (f (r (r cat_mod_struct)))
     )

     (defun-inline limitations_program_hash_from_cat_struct (cat_mod_struct)
       (f (r (r (r cat_mod_struct))))
     )

    (defun is_bundle_valid ((coin_info . lineage_proof) limitations_program Truths extra_delta inner_conditions)
      (if limitations_program
          (assert (= (sha256tree1 limitations_program) (limitations_program_hash_from_cat_struct (cat_struct_truth Truths)))
            (a limitations_program
                (list
                  Truths
                  extra_delta
                  (if (f lineage_proof)
                      (is_parent_cat (cat_struct_truth Truths) (my_parent_cat_truth Truths) (r lineage_proof))
                      ()
                  )
                  inner_conditions
                  (r lineage_proof)
                )
            )
          )
          (assert (is_parent_cat (cat_struct_truth Truths) (my_parent_cat_truth Truths) lineage_proof)
            inner_conditions
          )
      )
    )

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;

     (defun stager_three (
         Truths
         inner_conditions
         prev_coin_id
         this_coin_bundle
         next_coin_id
         prev_subtotal
         extra_delta
      )
      (is_bundle_valid
            this_coin_bundle
            (limitations_program_from_cat_struct (cat_struct_truth Truths))
            Truths
            extra_delta
            (generate_final_output_conditions
              prev_subtotal
              ; the expression on the next line calculates `this_subtotal` by adding the delta to `prev_subtotal`
              (+ (+ prev_subtotal (- (input_amount_for_coin (coin_info_for_coin_bundle this_coin_bundle)) (output_totals inner_conditions))) extra_delta)
              (morph_conditions inner_conditions (cat_struct_truth Truths))
              prev_coin_id
              (my_id_cat_truth Truths)
              next_coin_id
              (cat_struct_truth Truths)
            )
        )
    )

    (defun stager_two (
        Truths
        INNER_PUZZLE
        inner_solution
        prev_coin_id
        this_coin_bundle
        next_coin_id
        prev_subtotal
        extra_delta
     )
      (c (list ASSERT_MY_COIN_ID (my_id_cat_truth Truths))
         (stager_three Truths
                       (a INNER_PUZZLE (c Truths inner_solution))
                       prev_coin_id
                       this_coin_bundle
                       next_coin_id
                       prev_subtotal
                       extra_delta
         )

      )
   )



    ; CAT TRUTHS struct is: ; CAT Truths is: (((innerpuzhash . my_amount) . (lineage_proof . cat_struct)) . ((my_id . full_puzhash) . (my_parent . ())))
    ; create truths - this_coin_bundle verified true because we calculated my ID from it!
    ; lineage proof is verified later by cat parent check or genesis_checker_program

    (defun stager (
        cat_mod_struct
        INNER_PUZZLE
        inner_solution
        inner_puzzle_hash
        my_id
        prev_coin_id
        this_coin_bundle
        next_coin_bundle
        prev_subtotal
        extra_delta
     )
      ; struct construction params - (my_id my_parent full_puzhash my_amount innerpuzhash lineage_proof cat_struct)
      (stager_two (cat_truth_data_to_truth_struct my_id (f (f this_coin_bundle)) (f (r (f this_coin_bundle))) (f (r (r (f this_coin_bundle)))) inner_puzzle_hash (r this_coin_bundle) cat_mod_struct)
             INNER_PUZZLE
             inner_solution
             prev_coin_id
             this_coin_bundle
             (coin_id_for_coin next_coin_bundle cat_mod_struct)
             prev_subtotal
             extra_delta
       )
    )

    (stager
        ;; calculate cat_mod_struct, inner_puzzle_hash, coin_id
        (list MOD_HASH (sha256 1 MOD_HASH) limitations_program LIMITATIONS_PROGRAM_HASH)
        INNER_PUZZLE
        inner_puzzle_solution
        (sha256tree1 INNER_PUZZLE)
        (sha256 (f (f this_coin_bundle)) (f (r (f this_coin_bundle))) (f (r (r (f this_coin_bundle)))))
        prev_coin_id  ; ID
        this_coin_bundle  ; ((parent_id puzzle_hash amount) . (lineage_proof))
        next_coin_bundle ; (parent_id innerpuzhash amount)
        prev_subtotal
        extra_delta
    )


)
