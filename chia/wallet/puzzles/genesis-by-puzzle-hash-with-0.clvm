; This is a "genesis checker" for use with cc.clvm.
;
; This checker allows new ccs to be created if their parent has a particular
; puzzle hash; or created by anyone if their value is 0.

; The genesis_puzzle_hash is curried in, making this lineage_check program unique and giving the coloured coin it's unique colour

(mod (
      GENESIS_PUZZLE_HASH
      cc_mod_struct
      my_coin_info
      (parent_coin zero_parent_inner_puzzle_hash)
    )

    ;; boolean and macro
    ;; This lets you write something like (if (and COND1 COND2 COND3) (do_something) (do_something_else))
    (defmacro and ARGS
        (if ARGS
            (qq (if (unquote (f ARGS))
                (unquote (c and (r ARGS)))
                ()
                ))
            1)
    )

    ;; boolean or macro
    ;; This lets you write something like (if (or COND1 COND2 COND3) (do_something) (do_something_else))
    (defmacro or ARGS
        (if ARGS
            (qq (if (unquote (f ARGS))
                1
                (unquote (c or (r ARGS)))
            ))
        0)
    )

    (defun-inline main (
      GENESIS_PUZZLE_HASH
      my_coin_info
      parent_coin
    )
      (if (or
            (= (f (r (r my_coin_info))) 0)
            (and
              (= (sha256 (f parent_coin) (f (r parent_coin)) (f (r (r parent_coin)))) (f my_coin_info))
              (= (f (r parent_coin)) GENESIS_PUZZLE_HASH)
            )
          )
          1
          (x)
      )
    )

    (main
      GENESIS_PUZZLE_HASH
      my_coin_info
      parent_coin
    )
)
